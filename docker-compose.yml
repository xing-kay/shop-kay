version: '3.5'
# 网络配置
networks:
  backend:
    driver: bridge # 设置网络模式

# 服务容器配置
services:
  mysql:
    image: mysql/mysql-server:8.0.28
    container_name: mysql
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
      # root 密码 - root password
      MYSQL_ROOT_PASSWORD: 123456
    ports:
      - 3306:3306
    volumes:
      # 数据挂载 - Data mounting
      - ./tmp/mysql:/var/lib/mysql
      # 日志
    command:
      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
      # Modify the Mysql 8.0 default password strategy to the original strategy (MySQL8.0 to change its default strategy will cause the password to be unable to match)
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    privileged: true
    networks:
      - backend

  redis:
    image: redis:5.0.5
    container_name: redis
    environment:
      - TZ=Asia/Shanghai
    privileged: true
    volumes:
      - ./tmp/redis:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "6379:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend

  #rabbitmq:
  #  image: rabbitmq:3.7.15-management
  #  container_name: rabbitmq
  #  volumes:
  #    - ${DATA_PATH_HOST}/rabbitmq/data:/var/lib/rabbitmq #数据文件挂载
  #    - ${DATA_PATH_HOST}/rabbitmq/log:/var/log/rabbitmq #日志文件挂载
  #  ports:
  #    - "5672:5672"
  #    - "15672:15672"

  etcd:
    container_name: etcd
    hostname: etcd
    image: bitnami/etcd:latest
    privileged: true
    volumes:
      - ./tmp/etcd:/bitnami/etcd # 注意这个目录容器要可写，不然会报cannot access data directory: open
    environment:
      - "ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379"
      - "ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379"
      - "ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380"
      - "ETCD_INITIAL_ADVERTISE_PEER_URLS=http://0.0.0.0:2380"
      - "ALLOW_NONE_AUTHENTICATION=yes" #参数指不用密码可以连接
      - "ETCD_INITIAL_CLUSTER=node1=http://0.0.0.0:2380"
      - "ETCD_NAME=node1"
      - "ETCD_DATA_DIR=/opt/bitnami/etcd/data"
    ports:
      - "2379:2379"
      - "2380:2380"
    networks:
      - backend

  etcdManage:
    image: evildecay/etcdkeeper
    container_name: etcdManage
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "8000:8080"                    # 设置容器8080端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on: # 依赖容器
      - etcd                                          # 在 etcd 服务容器启动后启动
    networks:
      - backend

  #prometheus:
    #image: prom/prometheus:v2.28.1
    # 下面这个备用
    #image: bitnami/prometheus
    #container_name: prometheus
    #environment:
   #   - TZ=${TZ}
   # privileged: true
   # volumes:
   #   - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
   # ports:
   #   # Prometheus 服务映射宿主机端口号，可在宿主机127.0.0.1:3000访问
   #   - "3000:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
   # networks:
   #   - backend

  #rafana:
  # image: grafana/grafana:8.0.6
  # container_name: grafana
  # environment:
  #   - TZ=${TZ}
  # ports:
  #   - "4000:3000"       # 设置容器3000端口映射指定宿主机端口，127.0.0.1:4000访问
  # networks:
  #   - backend

  #jaeger:
  #  image: jaeger/all-in-one:latest
  #  container_name: jaeger
  #  environment:
  #    - TZ=${TZ}
  #  ports:
  #    - "5000:16686"      # 设置容器16686端口映射指定宿主机端口，可在宿主机127.0.0.1:5000访问
  #  networks:
  #    - backend

#分布式事务解决方案DTM
#  dtm:
#    image: yedf/dtm
#    environment:
#      - TZ=${TZ}
#    entrypoint:
#      - "/app/dtm/dtm"
#      - "-c=/app/dtm/configs/config.yaml"
#    privileged: true
#    volumes: #把本地文件挂载到容器里的指定的目录
#      - ./dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
#    ports:
#      - "36789:36789"  # DTM HTTP 协议端口号
#      - "36790:36790"  # DTM gRPC 协议端口号
#    #networks:
#      #- backend
